import type {
  BaseJsonSchema,
  ArrayJsonSchema,
  ObjectJsonSchema,
} from "./jsonSchema.js"

export interface Field {
  /**
   * Property name in an object schema or index in an array schema
   */
  name: string | number
  /**
   * Reference to the containing schema
   */
  schema: FormSchema
  /**
   * Reference to the parent of `self.schema`
   */
  parentSchema?: FormSchema
  /**
   * Dot-joined field names starting from the root field
   */
  path: string
  /**
   * Reference to this field's value
   *
   * @remarks
   *
   * Values are kept in a separate observable object so accessing this property will register a dependency to the referece so observers can recompute on change.
   */
  value: any
  /**
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/FormData FormData} object with the values of this and nested fields, excluding `disabled` fields.
   *
   * @remarks
   *
   * `FormData`'s API does not support nested values, so we take the `path` of leaf fields as keys.
   *
   * @example
   *
   * ```javascript
   * field.value = {
   *   friends: [{ name: "Ross" }, { name: "Rachel" }]
   * }
   *
   * // Prints { "frields.0.name": "Ross", "friends.1.name": "Rachel" }
   * console.log(Object.fromEntries(field.formData.entries()))
   * ```
   */
  formData: FormData
  /**
   * `true` if the parent schema has `type: object` and its `required` property includes this field's `name`
   *
   * @remarks
   *
   * Setting this property toggles this field's `name` in `parentSchema.required`
   */
  required: boolean
  /**
   * If set, this field will not participate in validation (`willValidate` will be `false`) nor will it be included in this field's `formData`
   *
   * The `disabled` state is inherited by all fields nested under this one.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled}
   */
  disabled: boolean
  /**
   * Equivalent to the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/hidden hidden} HTML attribute on an input element. Setting `hidden` excludes this field from validation.
   */
  hidden: boolean
  /**
   * Equivalent to the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly readonly} HTML attribute. Setting `readonly` excludes this field from validation.
   */
  readonly: boolean
  /**
   * Whether this field will be validated
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#the_constraint_validation_api}
   */
  readonly willValidate: boolean
  /**
   * Message describing the validation constraints the field doesn't satisfy (if any). An empty string will be returned if `willValidate` is `false` or this field is valid
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#the_constraint_validation_api}
   */
  readonly validationMessage: string
  /**
   * Add a custom `validationMessage` to this field; marking this field invalid.
   *
   * @remarks
   *
   * The specified error message **should** be displayed in the UI
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setCustomValidity}
   */
  setCustomValidity: (message: string) => void
  /**
   * Whether this field's value is valid. This method will call the passed `validate` function
   */
  checkValidity: () => boolean
  /**
   * Call the passed `validate` function and return whether this field's value is valid (same as `checkValidity`). Additionally, if `validate` produces errors, call `setCustomValidity` on the corresponding fields.
   *
   * @remarks
   *
   * Under the HTML's constraint validation API, this method reports invalid field(s) using events. Here, we simply call `setCustomValidity` and assume the errors will be displayed in the UI.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/reportValidity}
   */
  reportValidity: () => boolean
  /** @internal */
  __disabled: boolean
  /** @internal */
  __validationMessage: string
}

export interface ArrayField extends Field {
  /**
   * An array of (cloned) `schema.items` schemas, one for each item in this field's value
   *
   * @see {@link https://json-schema.org/draft/2020-12/json-schema-core.html#items}
   */
  readonly items: FormSchema[]
  /**
   * A simple check against the `schema.maxItems` json-schema keyword
   *
   * @see {@link https://json-schema.org/draft/2020-12/json-schema-validation.html#name-maxitems}
   */
  readonly canAddItem: boolean
  /**
   * Insert a new item at `index` to `items` and `value` arrays
   *
   * @remarks
   *
   * The new item will be cloned from `schema.items` and initialized just as a top-level form schema would (e.g. `field`s will be recursively added). An new, empty value will be generated by `getSchemaValue(schema.items)` and inserted into `value`.
   *
   * @param index - The index at which to insert the new item. Defaults to `value.length` if omitted.
   */
  addItem: (index?: number) => void
  /**
   * A simple check against the `schema.minItems` json-schema keyword
   *
   * @see {@link https://json-schema.org/draft/2020-12/json-schema-validation.html#name-minitems}
   */
  readonly canRemoveItem: boolean
  /**
   * Remove an item at `index` from `items` and `value` arrays
   *
   * @param index - The index at which to remove the element. Defaults to `value.length` if omitted.
   */
  removeItem: (index?: number) => void
}

export type ArrayFormSchema = ArrayJsonSchema & {
  field: ArrayField
  items: FormSchema
}

export type ObjectFormSchema = ObjectJsonSchema & {
  field: Field
  properties: Record<string, FormSchema>
}

export type FormSchema =
  | (BaseJsonSchema & { field: Field })
  | ArrayFormSchema
  | ObjectFormSchema
